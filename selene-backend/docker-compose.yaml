version: '3'
services:
  db:
    image: postgres:12.1
    restart: always
    environment:
      POSTGRES_PASSWORD_FILE: /docker-entrypoint-initdb.d/postgres_password
    volumes:
    - generated:/docker-entrypoint-initdb.d
    - shared:/shared
    command:
      - -c
      - "listen_addresses=*"
  db_setup:
    image: selene-backend
    restart: "on-failure"
    depends_on:
      - db
    links:
      - db
    volumes:
    - shared:/shared
    command:
      - bash
      - -c
      - "set -xe && sleep 10 && cd /opt/selene/selene-backend/db/scripts && pipenv run python -u bootstrap_mycroft_db.py && touch /shared/db_bootstrap_done"
      # TODO: Get rid of the sleep above. Open a PR to make the bootstrap script to retry if it fails to connect
      # The postgres image restart itself after running init scripts and this script looses the connection
      # and can't recover.
    environment:
      DB_PASSWORD: "${DB_PASSWORD}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      DB_HOST: "db"
  redis:
    image: redis:5.0.7
    restart: always
  sso:
    image: selene-backend
    restart: "on-failure"
    volumes:
    - shared:/shared
    links:
      - db
    command:
      - bash
      - -c
      - "if [ ! -f /shared/db_bootstrap_done ]; then echo 'Database bootstraping not done. Exiting.'; exit 1; fi;
         cd /opt/selene/selene-backend/api/sso && /usr/local/bin/pipenv run uwsgi --ini uwsgi.ini
        "
    environment:
      DB_HOST: db
      DB_NAME: mycroft
      DB_PASSWORD: "${DB_PASSWORD}"
      DB_PORT: 5432
      DB_USER: selene
      GITHUB_CLIENT_ID: <github client id> TODO
      GITHUB_CLIENT_SECRET: <github client secret> TODO
      JWT_ACCESS_SECRET: "${JWT_ACCESS_SECRET}"
      JWT_REFRESH_SECRET: "${JWT_REFRESH_SECRET}"
      JWT_RESET_SECRET: "${JWT_RESET_SECRET}"
      SALT: "${ENCRYPTION_SALT}"
      SELENE_ENVIRONMENT: prod
      SENDGRID_API_KEY: <sendgrid API key> TODO
      SSO_BASE_URL: "${SSO_BASE_URL}"
  account:
    image: selene-backend
    restart: "on-failure"
    volumes:
    - shared:/shared
    links:
      - db
      - redis
    command:
      - bash
      - -c
      - "if [ ! -f /shared/db_bootstrap_done ]; then echo 'Database bootstraping not done. Exiting.'; exit 1; fi;
         cd /opt/selene/selene-backend/api/account && /usr/local/bin/pipenv run uwsgi --ini uwsgi.ini
        "
    environment:
      DB_HOST: db
      DB_NAME: mycroft
      DB_PASSWORD: "${DB_PASSWORD}"
      DB_PORT: 5432
      DB_USER: selene
      JWT_ACCESS_SECRET: "${JWT_ACCESS_SECRET}"
      JWT_REFRESH_SECRET: "${JWT_REFRESH_SECRET}"
      SALT: "${ENCRYPTION_SALT}"
      SELENE_ENVIRONMENT: prod
      REDIS_HOST: redis
      REDIS_PORT: 6379
      OAUTH_BASE_URL: "${OAUTH_BASE_URL}"
  skills_setup:
    image: selene-backend
    restart: "on-failure"
    volumes:
    - shared:/shared
    links:
      - db
      - redis
    command:
      - bash
      - -c
      - "if [ ! -f /shared/db_bootstrap_done ]; then echo 'Database bootstraping not done. Exiting.'; exit 1; fi;
         cd /opt/selene/selene-backend/batch && /usr/local/bin/pipenv install &&  pipenv run python script/load_skill_display_data.py --core-version 19.08 && touch /shared/skills_setup_done
        "
        # TODO: core-version shouldn't be hardcoded (get latest somehow?)
    environment:
      DB_HOST: db
      DB_NAME: mycroft
      DB_PASSWORD: "${DB_PASSWORD}"
      DB_PORT: 5432
      DB_USER: selene
      GITHUB_USER: "${GITHUB_USER}"
      GITHUB_PASSWORD: "${GITHUB_PASSWORD}"
  markeplace:
    image: selene-backend
    restart: "on-failure"
    volumes:
    - shared:/shared
    links:
      - db
      - redis
    command:
      - bash
      - -c
      - "if [ ! -f /shared/skills_setup_done ]; then echo 'Skills downloading and setup not done. Exiting.'; exit 1; fi;
         cd /opt/selene/selene-backend/api/market && /usr/local/bin/pipenv run uwsgi --ini uwsgi.ini
        "
    environment:
      DB_HOST: db
      DB_NAME: mycroft
      DB_PASSWORD: "${DB_PASSWORD}"
      DB_PORT: 5432
      DB_USER: selene
      JWT_ACCESS_SECRET: "${JWT_ACCESS_SECRET}"
      JWT_REFRESH_SECRET: "${JWT_REFRESH_SECRET}"
      SALT: "${ENCRYPTION_SALT}"
      SELENE_ENVIRONMENT: prod
      REDIS_HOST: redis
      REDIS_PORT: 6379
      OAUTH_BASE_URL: "${OAUTH_BASE_URL}"
volumes:
  generated:
    driver: local
    driver_opts:
      type: none
      device: "${PWD}/generated"
      o: bind
  shared:
