version: '3.7'

services:
  # Databases
  db:
    image: postgres:alpine
    restart: always
    environment:
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
    volumes:
      - selene-db:/var/lib/postgresql/data
    ports:
      - "${DB_PORT}:${DB_PORT}"
    command:
      - -c
      - "listen_addresses=*"
      - -p
      - "${POSTGRES_PORT}"
  db_setup:
    image: selene-db-setup
    restart: "on-failure"
    depends_on:
      - db
    links:
      - db
    volumes:
      - shared:/shared
    environment:
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      DB_PASSWORD: "${DB_PASSWORD}"
      DB_HOST: "db"
      DB_PORT: "${DB_PORT}"
  redis:
    image: redis:5.0.7
    restart: always

  # Applications
  sso:
    image: selene-sso
    restart: "on-failure"
    volumes:
      - shared:/shared
    depends_on:
      - db
    links:
      - db
    ports:
      - ["${SSO_APP_PORT}:${SSO_APP_PORT}"]
      - ["5000:${SSO_APP_PORT_SOCKET}"]
    expose:
      - ["${SSO_APP_PORT}/tcp"]
      - ["${SSO_APP_PORT_SOCKET}/tcp"]
    environment:
      DB_HOST: db
      DB_PASSWORD: "${DB_PASSWORD}"
      DB_PORT: "${DB_PORT}"
      APP_PORT: "${SSO_APP_PORT}"
      JWT_ACCESS_SECRET: "${JWT_ACCESS_SECRET}"
      JWT_REFRESH_SECRET: "${JWT_REFRESH_SECRET}"
      JWT_RESET_SECRET: "${JWT_RESET_SECRET}"
      SALT: "${ENCRYPTION_SALT}"
      SENDGRID_API_KEY: "${SENDGRID_API_KEY}"
      SSO_BASE_URL: "${SSO_BASE_URL}"
      GITHUB_CLIENT_ID: ""
      GITHUB_CLIENT_SECRET: ""
  account:
    image: selene-account
    restart: "on-failure"
    volumes:
      - shared:/shared
    links:
      - db
      - redis
    ports:
      - "${ACCOUNT_APP_PORT}:${ACCOUNT_APP_PORT}"
      - "5000:${ACCOUNT_APP_PORT_SOCKET}"
    expose:
      - "${ACCOUNT_APP_PORT}/tcp"
      - "${ACCOUNT_APP_PORT_SOCKET}/tcp"
    environment:
      REDIS_HOST: redis
      DB_HOST: db
      DB_PASSWORD: "${DB_PASSWORD}"
      DB_PORT: "${DB_PORT}"
      APP_PORT: "${ACCOUNT_APP_PORT}"
      JWT_ACCESS_SECRET: "${JWT_ACCESS_SECRET}"
      JWT_REFRESH_SECRET: "${JWT_REFRESH_SECRET}"
      SALT: "${ENCRYPTION_SALT}"
      OAUTH_BASE_URL: "${OAUTH_BASE_URL}"
  skills_setup:
    image: selene-skills-setup
    restart: "on-failure"
    volumes:
      - shared:/shared
    links:
      - db
    environment:
      DB_HOST: db
      DB_PASSWORD: "${DB_PASSWORD}"
      DB_PORT: "${DB_PORT}"
      GITHUB_USER: "${GITHUB_USER}"
      GITHUB_PASSWORD: "${GITHUB_PASSWORD}"
  market:
    image: selene-backend
    restart: "on-failure"
    volumes:
      - shared:/shared
    links:
      - db
      - redis
    expose:
      - "4000"
    command:
      - bash
      - -c
      - "if [ ! -f /shared/skills_setup_done ]; then echo 'Skills downloading and setup not done. Exiting.'; exit 1; fi;
         cd /opt/selene/selene-backend/api/market && /usr/local/bin/pipenv run uwsgi -b 32768 --http 0.0.0.0:4000 --ini uwsgi.ini
        "
    environment:
      DB_HOST: db
      DB_NAME: mycroft
      DB_PASSWORD: "${DB_PASSWORD}"
      DB_PORT: 5432
      DB_USER: selene
      JWT_ACCESS_SECRET: "${JWT_ACCESS_SECRET}"
      JWT_REFRESH_SECRET: "${JWT_REFRESH_SECRET}"
      SALT: "${ENCRYPTION_SALT}"
      SELENE_ENVIRONMENT: prod
      REDIS_HOST: redis
      REDIS_PORT: 6379
      OAUTH_BASE_URL: "${OAUTH_BASE_URL}"
  devices:
    image: selene-backend
    restart: "on-failure"
    volumes:
      - shared:/shared
    links:
      - db
      - redis
    expose:
      - "4000"
    command:
      - bash
      - -c
      - "if [ ! -f /shared/skills_setup_done ]; then echo 'Skills downloading and setup not done. Exiting.'; exit 1; fi;
         cd /opt/selene/selene-backend/api/public && /usr/local/bin/pipenv run uwsgi -b 32768 --http 0.0.0.0:4000 --ini uwsgi.ini"
    environment:
      DB_HOST: db
      DB_NAME: mycroft
      DB_PASSWORD: "${DB_PASSWORD}"
      DB_PORT: 5432
      DB_USER: selene
      JWT_ACCESS_SECRET: "${JWT_ACCESS_SECRET}"
      JWT_REFRESH_SECRET: "${JWT_REFRESH_SECRET}"
      SALT: "${ENCRYPTION_SALT}"
      SELENE_ENVIRONMENT: prod
      REDIS_HOST: redis
      REDIS_PORT: 6379
      OAUTH_BASE_URL: "${OAUTH_BASE_URL}"
      EMAIL_SERVICE_HOST: "${EMAIL_SERVICE_HOST}"
      EMAIL_SERVICE_PORT: "${EMAIL_SERVICE_PORT}"
      EMAIL_SERVICE_USER: "${EMAIL_SERVICE_USER}"
      EMAIL_SERVICE_PASSWORD: "${EMAIL_SERVICE_PASSWORD}"
      GOOGLE_STT_KEY: "${GOOGLE_STT_KEY}" # NOTE: Optional if you plan to use Google for STT
      OWM_KEY: "${OWM_KEY}"
      OWM_URL: "https://api.openweathermap.org/data/2.5"
      WOLFRAM_ALPHA_KEY: "${WOLFRAM_ALPHA_KEY}"
      WOLFRAM_ALPHA_URL: "https://api.wolframalpha.com"

  # UI
  selene-ui-market:
    image: selene-ui-market
    restart: "on-failure"
  selene-ui-account:
    image: selene-ui-account
    restart: "on-failure"
  selene-ui-sso:
    image: selene-ui-sso
    restart: "on-failure"
  # This is and nginx reverse proxy that redirects all subdomains and api
  # endpoints to the correct container.
  selene-ui-proxy:
    image: mycroft-nginx-proxy
    restart: "on-failure"
    links:
      - market
      - sso
      - account
      - devices
      - selene-ui-market
      - selene-ui-sso
    depends_on:
      - market
      - sso
      - account
      - devices
      - selene-ui-market
      - selene-ui-sso
    ports:
      - "80:80"
      - "443:443"

volumes:
  shared:
  selene-db:
